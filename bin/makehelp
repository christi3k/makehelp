#!/usr/bin/perl
# Prints help for a Makefile.
# Usual invocation (from make):
# help:
# 	perl makehelp $(MAKEFILE_LIST)
#
# To make your make inline help documentation work, start documentation comments before a target or variable with double-hash.
# Example:
# .PHONY: all
# ## Compiles and links all sources.
# # This is the default target.
# all: ...

$version = "1.5";

sub changelog() {
    print <<END;
2018-11-16 1.5
    Use file suffix .mk instead of .mak for compatibility with the Makefile support plugin for IntelliJ IDEA.
    Auto-detect the location from the Makefile list.

2015-01-25 1.4
    Use Help.mak instead of direct rules.
    Change name from makehelp.pl to makehelp.
    Add man page.
    Generate variable definition file which automatically exports all variables required for help.
    Print current value of each variable.

2014-07-07 1.3
    Make the command line options more similar to glibc argp.

2012-11-11 1.2
    Implement changelog option.

END
}

sub help() {
    print <<END;
Usage: perl $0 MAKEFILE...
Prints the help text of one or more MAKEFILEs.

To be invoked from the Makefile with a rule like this:
help:
	perl $0 \$(MAKEFILE_LIST)

Supported options:
  -c, --changelog   Print the changelog.
  -?, --help        Print this help text.
  -h                Same as -?
  -V, --version     Print version information.
  -d, --vardefs     Generate variable definition file.

$0 prints the documentation of variables and goals.
A documentation comment is recognized as one or more comment lines right before a goal or variable definition,
of which the first comment line starts with ##.
The documentation comment may contain references to environment variables.
All references to environment variables will be replaced with their values.
This includes the make goal.
Note: To reference variables which are defined in the Makefile, don't forget to export them.

Example:
  .PHONY: all
  ## Performs the complete build of the project.
  # This is the default target.
  all: mybinary

  ## Flags for the C preprocessor.
  CPPFLAGS?=

  include makehelp/Help.mk

Report bugs to cher\@riedquat.de.
END
}

sub version() {
    print <<END;
$0 $version
(c) 2011 - 2015 Christian Hujer. All rights reserved.
Licensed under GPLv3.
See http://www.gnu.org/licenses/gpl.html for license information.
END
}

while ($_ = shift) {
    /^-(c|-?changelog)$/ and changelog() and exit 0;
    /^-(\?|h|-?help)$/ and help() and exit 0;
    /^-(V|-?version)$/ and version() and exit 0;
    /^-(d|-?vardefs)$/ and $vardefs = 1 and next;
    /^(-.*)$/ and die "$0: Unknown command line option $1. Try $0 --help.";
    push @RealArgs, $_;
}
@ARGV = @RealArgs;

while (<>) {
    if (/^## .*$/ ... /^([^.#\t][^:=]*:([^=]|$)|([^.#\t][^:=?]*(\?=|:=|=))|$)/) {
        s/^##? ?//;
        $h .= $p;
        $p = $_;
    } elsif ($h) {
        $p =~ s/^export //;
        $p =~ s/(\?=|:=|=).*/=/;
        $p =~ s/:.*/:/;
        chomp $p;
        $d{$1} = 1 while $h =~ /\$\(([^)]*)\)/g;
        $p =~ s/\$\(([^)]*)\)/$ENV{$1}/ge;
        $h =~ s/\$\(([^)]*)\)/$ENV{$1}/ge;
        if ($p =~ /=$/) {
            $p =~ s/=$//;
            $p =~ s/^\s+|\s+$//g;
            $d{$p} = 1;
            $h.="Current value: $ENV{$p}\n";
            if ($h ne $vars{$p}) {
                $vars{$p} .= $h;
            }
        } else {
            $p =~ s/:$//;
            if ($h ne $goals{$p}) {
                $goals{$p} .= $h;
            }
        }
        undef $h;
        undef $p;
    }
}

if ($vardefs) {
    my @keys = keys %d;
    for my $element (@keys) {
      $element =~ s/^\s+|\s+$//g;
      /^export / or print "help: export $element:=\$(value $element)\n";
    }
    exit 0;
}

print <<END;
Usage: make [OPTION|GOAL|VARIABLE]...
Runs make to make the specified GOALs.
If no GOAL is specified, the default goal is made (usually "all").

Popular make OPTIONs:
  -s    Silent mode, disables command echo.
  -k    Keep going, continues after errors.
  -j N  Run N jobs in parallel.
  -n    Don't run the commands, just print them.
  -q    Run no commands; exit status says if up to date.
  -h    Print make help text.
Use option -h to lists the GNUmake part of the help.
END

my $indent = " " x 20;
if (%vars) {
    print <<END;

A VARIABLE is specified as name=value pair.
Supported VARIABLEs:
END

    for (sort keys %vars) {
        $vars{$_} =~ s/^/$indent/gm;
        if (length > 16) {
            print "  $_\n$vars{$_}";
        } else {
            $tmpIndent = " " x (2 + length);
            $vars{$_} =~ s/^$tmpIndent//;
            print "  $_$vars{$_}";
        }
    }
}

print <<END;

Supported GOALs:
END

for (sort keys %goals) {
    $goals{$_} =~ s/^/$indent/gm;
    if (length > 16) {
        print "  $_\n$goals{$_}";
    } else {
        $tmpIndent = " " x (2 + length);
        $goals{$_} =~ s/^$tmpIndent//;
        print "  $_$goals{$_}";
    }
}
